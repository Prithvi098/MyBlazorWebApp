@using static MyBlazorApp.Common.ToastService
@inject ToastService ToastService
@implements IDisposable
@rendermode InteractiveServer 

<div class="toast-wrapper">
    @foreach (var toast in Toasts)
    {
        <div class="toast show @(toast.IsActive ? "active" : "")">
            <div class="toast-content">
                <i class="fas fa-solid fa-check check"></i>
                <div class="message">
                    <span class="text text-1">@toast.Title</span>
                    <span class="text text-2">@toast.Message</span>
                </div>
            </div>
            <i class="fa-solid fa-xmark close" @onclick="() => CloseToast(toast.Id)"></i>
            <div class="progress @(toast.IsActive ? "active" : "")"></div>
        </div>
    }
</div>




@code {

    private List<ToastEntry> Toasts = new();


    protected override void OnInitialized()
    {
        ToastService.OnShow += AddToast;
    }

    private void AddToast(ToastEntry entry)
    {
        Toasts.Add(entry);
        InvokeAsync(StateHasChanged);

        _ = Task.Run(async () =>
        {
            await Task.Delay(5000).ContinueWith(_ => CloseToast(entry.Id));

        });
    }

    private void CloseToast(Guid id)
    {
        var toast = Toasts.FirstOrDefault(t => t.Id == id);
        if (toast != null)
        {
            toast.IsActive = false;
            InvokeAsync(StateHasChanged);

            _ = Task.Delay(500).ContinueWith(_ =>
            {
                Toasts.Remove(toast);
                InvokeAsync(StateHasChanged);
            });
        }
    }

    public void Dispose()
    {
        ToastService.OnShow -= AddToast;
    }

}