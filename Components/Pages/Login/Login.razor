@page "/"
@using static MyBlazorApp.Models.LoginModel
@layout LoginLayout
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject HttpClient Http
@rendermode InteractiveServer

@* <h3 class="login-title">Welcome Back</h3> *@
<div class="col-12 d-flex align-items-center p-sm-5 p-4 right-area">
    <div class="login-box mx-auto">
        <div class="brand-logo">
            <a href="#!">
                <img src="/Logo.png" alt="logo" class="img-fluid" />
            </a>
        </div>
        <h3 class="mb-1 align-items-center">Employee Management System</h3>
        @* <p class="mb-4 short-text">Please sign-in to your account and start the adventure</p> *@
        <p class="mb-4 short-text">Sign in to start your session</p>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="text-danger">@errorMessage</div>
        }
        <EditForm Model="@loginModel" OnValidSubmit="SubmitForm">
            <DataAnnotationsValidator />

            <div class="input-group mb-3">
                <label class="form-label required">Username</label>
                <InputText @bind-Value="loginModel.Username" class="form-control" />
                <div class="input-group-text">
                    <span class="fas fa-envelope"></span>
                </div>
            </div>
            <ValidationMessage For="@(() => loginModel.Username)" />

            <div class="input-group mb-3">
                <label class="form-label required">Password</label>
                <InputText @bind-Value="loginModel.Password" Type="password" class="form-control" />
                <div class="input-group-text">
                    <span class="fas fa-lock"></span>
                </div>
            </div>
            <ValidationMessage For="@(() => loginModel.Password)" />

            <div class="submit-btn">
                <div class="row">
                    <div class="col-md-6">
                        <button type="submit" class="btn btn-primary btn-block">Login</button>
                    </div>
                    <div class="col-md-6">
                        <button type="button" class="btn btn-primary btn-block" @onclick="() => NavigateToRegister()">Register</button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>


@code {
    private string errorMessage = string.Empty;
    private LoginModel.LoginRequest loginModel = new();

    private async Task SubmitForm()
    {
        // Pass the login model directly to JS
            await JS.InvokeVoidAsync("submitLoginForm", loginModel);

        /*try
        {
            var formData = new MultipartFormDataContent
            {
                { new StringContent(loginModel.Username), "username" },
                { new StringContent(loginModel.Password), "password" }
            };

            var response = await Http.PostAsync("/api/login/userlogin", formData);

            if (!response.IsSuccessStatusCode)
            {
                var err = await response.Content.ReadAsStringAsync();
                errorMessage = "Invalid username or password";
                return;
            }

            var json = await response.Content.ReadFromJsonAsync<LoginResponse>();

            if (json != null)
            {
                // ✅ Store JWT in localStorage
                await JS.InvokeVoidAsync("localStorage.setItem", "auth_token", json.token);

                // Redirect to home
                Navigation.NavigateTo("/home", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Something went wrong: " + ex.Message;
        }*/
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("error", out var err))
        {
            errorMessage = err!;
        }
    }

}