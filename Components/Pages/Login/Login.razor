@page "/"
@layout LoginLayout
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3 class="login-title">Welcome Back</h3>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="text-danger">@errorMessage</div>
}
<EditForm Model="@loginModel" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="loginModel.Username" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Username)" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText @bind-Value="loginModel.Password" Type="password" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button type="submit" class="btn-login">Login</button>
</EditForm>

@code {
    private string errorMessage = string.Empty;
    private LoginModel.LoginRequest loginModel = new();

    private async Task SubmitForm()
    {
        // Pass the login model directly to JS
        await JS.InvokeVoidAsync("submitLoginForm", loginModel);
    }

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("error", out var err))
        {
            errorMessage = err!;
        }
    }

}