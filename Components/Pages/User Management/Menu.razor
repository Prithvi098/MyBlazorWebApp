@page "/menu"
@attribute [Authorize]
@layout MainLayout
@inject IDbContextFactory<EMSContext> DbFactory
@inject ToastService ToastService
@rendermode InteractiveServer

<PageTitle>Menu</PageTitle>

<div class="row">
	<div class="col-md-4">
		<div class="card">
			<div class="card-header">
				<h3>Create Menu</h3>
			</div>
			<div class="card-body">
				<EditForm Model="menu">
					<FluentValidationValidator />
					<div class="form-group">
						<label>Menu Name</label>
						<InputText class="form-control" placeholder="Menu Name" @bind-Value="menu.MenuName"></InputText>
						<ValidationMessage For="@(() => menu.MenuName)" />
					</div>
					<div class="form-group">
						<label>Menu URL</label>
						<InputText class="form-control" placeholder="Menu Url" @bind-Value="menu.MenuUrl"></InputText>
						<ValidationMessage For="@(() => menu.MenuUrl)" />
					</div>
					<div class="form-group">
						<label>Menu Description</label>
						<InputText class="form-control" placeholder="Menu Description" @bind-Value="menu.MenuDesc"></InputText>
					</div>
					<div class="form-group">
						<label>Menu Sort Order</label>
						<InputText class="form-control" placeholder="Menu Sort Order" @bind-Value="MenuSortOrder"></InputText>
					</div>
					<div class="form-group">
						<div class="form-check">
							<input class="form-check-input" type="checkbox" @bind="IsSubmenu" id="IsSubmenu" />
							<label class="form-check-label" for="IsSubmenu">Is Sub Menu</label>
						</div>
					</div>
					@if (IsSubmenu)
					{
						<div class="form-group">
							<label>Department</label>
							<InputSelect @bind-Value="menu.PMID" class="form-control">
								<option value="">-- Select Menu --</option>
								@foreach (var menu in MainMenuList)
								{
									<option value="@menu.MID">@menu.MenuName</option>
								}
							</InputSelect>
							@* <ValidationMessage For="@(() => employee.Department_type)" /> *@
						</div>
					}
					<div class="row">
						<div class="col-md-2">
							<button type="submit" class="btn btn-primary">Save</button>
						</div>
						<div class="col-md-2">
							<button type="button" class="btn btn-secondary" @onclick="@(() => Clear())">Clear</button>
						</div>
					</div>
					
				</EditForm>
			</div>
		</div>
	</div>
	<div class="col-md-8">
		<div class="card">
			<div class="card-header">
				<h3>Menu List</h3>
			</div>
			<div class="card-body">

				<QuickGrid TGridItem="Mst_Menu" Items="@MenuList.AsQueryable()" Class="table table-bordered border-3 border-black" Pagination="@pagination" PageSize="10">
					<PropertyColumn Property="@(e => e.MID)" Title="MID" Sortable="true" />
					<PropertyColumn Property="@(e => e.MenuName)" Title="Menu Name" Sortable="true" />
					<PropertyColumn Property="@(e => e.MenuUrl)" Title="Menu Url" Sortable="true" />
					<TemplateColumn Title="Action">
						<a class="btn btn-sm btn-primary">
							<i class="fa-solid fa-pen"></i>
						</a>
						<a class="btn btn-sm btn-danger" @onclick="() => AskDelete(context.MID)">
							<i class="fa-solid fa-trash"></i>
						</a>
					</TemplateColumn>
				</QuickGrid>
				@* <Paginator State="@pagination" /> *@
				<div class="d-flex justify-content-between align-items-center mt-3">
					<span class="text-muted">
						Showing @(pagination.CurrentPageIndex* pagination.ItemsPerPage + 1) -
						@(Math.Min((pagination.CurrentPageIndex + 1) * pagination.ItemsPerPage, MenuList.Count))
						of @MenuList.Count items
					</span>

					<nav>
						<ul class="pagination mb-0">
							<!-- First -->
							<li class="page-item @(pagination.CurrentPageIndex == 0 ? "disabled" : "")">
								<button class="page-link" type="button"
										disabled="@(pagination.CurrentPageIndex == 0)"
										@onclick="@(async () => await GoToPageAsync(0))">
									« First
								</button>
							</li>

							<!-- Prev -->
							<li class="page-item @(pagination.CurrentPageIndex == 0 ? "disabled" : "")">
								<button class="page-link" type="button"
										disabled="@(pagination.CurrentPageIndex == 0)"
										@onclick="@(async () => await GoToPageAsync(pagination.CurrentPageIndex - 1))">
									‹ Prev
								</button>
							</li>

							<!-- Page numbers -->
							@for (int i = 0; i <= (pagination.LastPageIndex ?? 0); i++)
							{
								<li class="page-item @(pagination.CurrentPageIndex == i ? "active" : "")">
									<button class="page-link" type="button"
											disabled="@(pagination.CurrentPageIndex == i)"
											@onclick="@(async () => await GoToPageAsync(i))">
										@(i + 1)   @* Show 1-based label but pass 0-based index *@
									</button>
								</li>
							}

							<!-- Next -->
							<li class="page-item @((pagination.LastPageIndex.HasValue && pagination.CurrentPageIndex >= pagination.LastPageIndex) ? "disabled" : "")">
								<button class="page-link" type="button"
										disabled="@(pagination.LastPageIndex.HasValue && pagination.CurrentPageIndex >= pagination.LastPageIndex)"
										@onclick="@(async () => await GoToPageAsync(pagination.CurrentPageIndex + 1))">
									Next ›
								</button>
							</li>

							<!-- Last -->
							<li class="page-item @((pagination.LastPageIndex.HasValue && pagination.CurrentPageIndex >= pagination.LastPageIndex) ? "disabled" : "")">
								<button class="page-link" type="button"
										disabled="@(pagination.LastPageIndex.HasValue && pagination.CurrentPageIndex >= pagination.LastPageIndex)"
										@onclick="@(async () => await GoToPageAsync(pagination.LastPageIndex ?? 0))">
									Last »
								</button>
							</li>
						</ul>
					</nav>
				</div>
			</div>
		</div>
		
	</div>
</div>
<ConfirmationModal Show="@ShowConfirmDialog"
               Title="Delete Department"
               Message="Are you sure you want to delete this department?" 
			   ConfirmationChanged="OnDeleteConfirmation"/>

@code {
	private List<Mst_Menu> MenuList = new List<Mst_Menu>();
	private List<Mst_Menu> MainMenuList = new List<Mst_Menu>();
	private Mst_Menu menu = new();
	private string? MenuSortOrder;
	private int DeleteMid { get; set; }
	private bool ShowConfirmDialog { get; set; }
	private bool IsSubmenu { get; set; } = false;

	private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

	private async Task GoToPageAsync(int pageIndex)
	{
		var last = pagination.LastPageIndex ?? 0;

		if (pageIndex < 0) pageIndex = 0;
		if (pageIndex > last) pageIndex = last;

		await pagination.SetCurrentPageIndexAsync(pageIndex);
	}

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		await GetMainMenuList();
		await LoadMenuList();
	}

	private async Task GetMainMenuList()
	{
		using var Db = DbFactory.CreateDbContext();
		var menulist = await Db.Mst_Menu.Where(m => m.DeletedBy == null && (m.PMID == null || m.PMID == 0)).ToListAsync();
		if (menulist.Count > 0)
		{
			MainMenuList = menulist;
		}
	}

	private async Task LoadMenuList()
	{
		using var Db = DbFactory.CreateDbContext();
		MenuList = await Db.Mst_Menu.Where(m => m.DeletedBy == null).OrderBy(m => m.MID).ToListAsync();
		StateHasChanged();
	}

	private void Clear()
	{
		menu = new();
		IsSubmenu = false;
		MenuSortOrder = string.Empty;
	}

	private void AskDelete(int MId)
	{
		DeleteMid = MId;
		ShowConfirmDialog = true;
	}

	private async Task OnDeleteConfirmation(bool confirmed)
	{
		ShowConfirmDialog = false;
		if (confirmed)
		{
			await DeleteMenu(DeleteMid);
		}
	}

	private async Task DeleteMenu(int MId)
	{
		using var Db = DbFactory.CreateDbContext();
		var existmenu = await Db.Mst_Menu.Where(m => m.DeletedBy == null && m.MID == MId).FirstOrDefaultAsync();
		if (existmenu == null){ ToastService.ShowToast("No Menu found!", "warning", "Warning"); await LoadMenuList(); await GetMainMenuList(); return; }

		existmenu.DeletedBy = 1;
		existmenu.DeletedOn = DateTime.Now;
		await Db.SaveChangesAsync();
		ToastService.ShowToast("Menu Deleted successfully!", "success", "Success");
		await LoadMenuList(); 
		await GetMainMenuList();
	}
}
