@page "/menu"
@attribute [Authorize]
@layout MainLayout
@inject IDbContextFactory<EMSContext> DbFactory
@inject ToastService ToastService
@rendermode InteractiveServer

<PageTitle>Menu</PageTitle>

<section class="content inner-tbl pt-5 pb-3">
	<div class="container-fluid p-0">
		<div class="row">
			<div class="col-12 col-lg-5">
				<div class="card">
					<EditForm Model="menu" OnValidSubmit="AskSave">
						<FluentValidationValidator />
						<div class="content-header">
							<div class="container-fluid">
								<div class="row align-items-center">
									<div class="col-12 col-md-7 col-lg-7">
										<div class="main-title text-center text-md-left text-lg-left">
											<h2>Add Menu</h2>
										</div>
									</div>

									<div class="col-12 col-md-5 col-lg-5 text-center text-md-right text-lg-right">
										<button type="button" class="btn btn-secondary" @onclick="@(() => Clear())">Clear</button>
										<button type="submit" class="btn btn-primary ml-2" id="btnSaveMenu">Save</button>
									</div>
								</div>
							</div>
						</div>
						<div class="card-body">
							<div class="form-group">
								<label>Menu Name</label>
								<InputText class="form-control" placeholder="Menu Name" @bind-Value="menu.MenuName"></InputText>
								<ValidationMessage For="@(() => menu.MenuName)" />
							</div>
							<div class="form-group">
								<label>Menu URL</label>
								<InputText class="form-control" placeholder="Menu Url" @bind-Value="menu.MenuUrl"></InputText>
								<ValidationMessage For="@(() => menu.MenuUrl)" />
							</div>
							<div class="form-group">
								<label>Menu Description</label>
								<InputText class="form-control" placeholder="Menu Description" @bind-Value="menu.MenuDesc"></InputText>
								<ValidationMessage For="@(() => menu.MenuDesc)" />
							</div>
							<div class="form-group">
								<label>Menu Sort Order</label>
								@* <InputText class="form-control" placeholder="Menu Sort Order" @bind-value="MenuSortOrder" @oninput="() => checksortorder(MenuSortOrder)"></InputText> *@
								<InputNumber @bind-Value="menu.SortOrder" class="form-control" placeholder="Menu Sort Order" />
								<ValidationMessage For="@(() => menu.SortOrder)" />
							</div>
							<div class="form-group">
								<div class="form-check">
									<input class="form-check-input" type="checkbox" @bind="IsSubmenu" id="IsSubmenu" />
									<label class="form-check-label" for="IsSubmenu">Is Sub Menu</label>
								</div>
							</div>
							@if (IsSubmenu)
							{
								<div class="form-group">
									<label>Select Parent Menu</label>
									<InputSelect @bind-Value="menu.PMID" class="form-control">
										<option value="">-- Select Menu --</option>
										@foreach (var menu in MainMenuList)
										{
											<option value="@menu.MID">@menu.MenuName</option>
										}
									</InputSelect>
									@* <ValidationMessage For="@(() => employee.Department_type)" /> *@
								</div>
							}
							@* <div class="row">
								 <div class="col-md-12">
									<button type="submit" class="btn btn-primary">Save</button>
									<button type="button" class="btn btn-secondary" @onclick="@(() => Clear())">Clear</button>
								</div>
							</div> *@

						</div>
					</EditForm>
				</div>
			</div>
			<div class="col-12 col-lg-7">
				<div class="card">
					<div class="card-header">
						<h3>Menu List</h3>
					</div>
					<div class="card-body table-responsive">
						@if (MenuList.Count == 0)
						{
							<Loader />
						}
						else
						{
							<QuickGrid TGridItem="Mst_Menu_New"
									   ItemsProvider="LoadData"
									   Pagination="pagination"
									   Class="table table-bordered border-3 border-black" Virtualize="false">

								<PropertyColumn Property="@(e => e.MID)" Title="MID" Sortable="true" />
								<PropertyColumn Property="@(e => e.MenuName)" Title="Menu Name" Sortable="true" />
								<PropertyColumn Property="@(e => e.MenuUrl)" Title="Menu Url" Sortable="true" />

								<TemplateColumn Title="Action">
									<a class="btn btn-sm btn-primary" @onclick="() => GetMenuDetail(context.MID)">
										<i class="fa-solid fa-pen"></i>
									</a>
									<a class="btn btn-sm btn-danger" @onclick="() => AskDelete(context.MID)">
										<i class="fa-solid fa-trash"></i>
									</a>
								</TemplateColumn>
							</QuickGrid>

							<div class="d-flex justify-content-between align-items-center mt-3">
								<span class="text-muted">
									Showing @(pagination.CurrentPageIndex* pagination.ItemsPerPage + 1) -
									@(Math.Min((pagination.CurrentPageIndex + 1) * pagination.ItemsPerPage, MenuList.Count))
									of @MenuList.Count items
								</span>

								<nav>
									<ul class="pagination mb-0">
										<!-- First -->
										<li class="page-item @(pagination.CurrentPageIndex == 0 ? "disabled" : "")">
											<button class="page-link" type="button"
													disabled="@(pagination.CurrentPageIndex == 0)"
													@onclick="@(async () => await GoToPageAsync(0))">
												« First
											</button>
										</li>

										<!-- Prev -->
										<li class="page-item @(pagination.CurrentPageIndex == 0 ? "disabled" : "")">
											<button class="page-link" type="button"
													disabled="@(pagination.CurrentPageIndex == 0)"
													@onclick="@(async () => await GoToPageAsync(pagination.CurrentPageIndex - 1))">
												‹ Prev
											</button>
										</li>

										<!-- Page numbers -->
										@for (int i = 0; i < TotalPages; i++)
										{
											var pageIndex = i;

											<li class="page-item @(pagination.CurrentPageIndex == pageIndex ? "active" : "")">
												<button class="page-link" type="button"
														disabled="@(pagination.CurrentPageIndex == pageIndex)"
														@onclick="@(async () => await GoToPageAsync(pageIndex))">
													@(pageIndex + 1)
												</button>
											</li>
										}

										<!-- Next -->
										<li class="page-item @((pagination.LastPageIndex.HasValue && pagination.CurrentPageIndex >= pagination.LastPageIndex) ? "disabled" : "")">
											<button class="page-link" type="button"
													disabled="@(pagination.LastPageIndex.HasValue && pagination.CurrentPageIndex >= pagination.LastPageIndex)"
													@onclick="@(async () => await GoToPageAsync(pagination.CurrentPageIndex + 1))">
												Next ›
											</button>
										</li>

										<!-- Last -->
										<li class="page-item @((pagination.LastPageIndex.HasValue && pagination.CurrentPageIndex >= pagination.LastPageIndex) ? "disabled" : "")">
											<button class="page-link" type="button"
													disabled="@(pagination.LastPageIndex.HasValue && pagination.CurrentPageIndex >= pagination.LastPageIndex)"
													@onclick="@(async () => await GoToPageAsync(pagination.LastPageIndex ?? 0))">
												Last »
											</button>
										</li>
									</ul>
								</nav>
							</div>
						}
					</div>
				</div>

			</div>
		</div>
	</div>
</section>

<ConfirmationModal Show="@ShowConfirmDialog"
				   Title=@ConfirmationTitle
				   Message=@ConfirmationMessage
				   ConfirmationChanged="OnDeleteConfirmation"/>

@code {
	private List<Mst_Menu_New> MenuList = new List<Mst_Menu_New>();
	private List<Mst_Menu_New> MainMenuList = new List<Mst_Menu_New>();
	private Mst_Menu_New menu = new();
	private string? MenuSortOrder;
	private string? ConfirmationTitle;
	private string? ConfirmationMessage;
	private int DeleteMid { get; set; }
	private bool ShowConfirmDialog { get; set; }
	private bool IsSubmenu { get; set; } = false;
	private bool IsSaveConfirmation { get; set; } = false;

	private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };


	private int TotalPages =>
		(int)Math.Ceiling((double)MenuList.Count / pagination.ItemsPerPage);

	private async Task GoToPageAsync(int pageIndex)
	{
		var last = pagination.LastPageIndex ?? 0;

		if (pageIndex < 0) pageIndex = 0;
		if (pageIndex > last) pageIndex = last;

		await pagination.SetCurrentPageIndexAsync(pageIndex);
	}

	private async ValueTask<GridItemsProviderResult<Mst_Menu_New>> LoadData(GridItemsProviderRequest<Mst_Menu_New> request)
	{
		// Get IQueryable from your source
		if (MenuList == null || !MenuList.Any())
			return GridItemsProviderResult.From(Array.Empty<Mst_Menu_New>(), 0);

		var query = MenuList.AsQueryable();

		var items = query
			.Skip(request.StartIndex)
			.Take(request.Count ?? pagination.ItemsPerPage)
			.ToList();

		return GridItemsProviderResult.From(items, MenuList.Count);

	}

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		await GetMainMenuList();
		await LoadMenuList();

		await pagination.SetCurrentPageIndexAsync(0);
	}

	private async Task GetMainMenuList()
	{
		using var Db = DbFactory.CreateDbContext();
		var menulist = await Db.Mst_Menu_New.Where(m => m.DeletedBy == null && (m.PMID == null || m.PMID == 0)).ToListAsync();
		if (menulist.Count > 0)
		{
			MainMenuList = menulist;
		}
	}

	private async Task LoadMenuList()
	{
		using var Db = DbFactory.CreateDbContext();
		MenuList = await Db.Mst_Menu_New.Where(m => m.DeletedBy == null).OrderBy(m => m.MID).ToListAsync();
		StateHasChanged();
	}

	private void Clear()
	{
		menu = new();
		IsSubmenu = false;
		MenuSortOrder = string.Empty;
	}

	private void AskDelete(int MId)
	{
		DeleteMid = MId;
		ConfirmationTitle = "Delete Menu";
		ConfirmationMessage = "Are you sure you want to delete this Menu?";
		ShowConfirmDialog = true;
		IsSaveConfirmation = false;
	}

	private void AskSave()
	{
		ConfirmationTitle = menu.MID == 0 ? "Save Menu" : "Update Menu";
		ConfirmationMessage = menu.MID == 0 ? "Are you sure you want to save this Menu?" : "Are you sure you want to update this Menu?";
		ShowConfirmDialog = true;
		IsSaveConfirmation = true;
	}

	private async Task OnDeleteConfirmation(bool confirmed)
	{
		ShowConfirmDialog = false;
		if (IsSaveConfirmation)
		{
			if (confirmed)
			{
				await SaveMenu();
				IsSaveConfirmation = false;
			}
		}
		else
		{
			if (confirmed)
			{
				await DeleteMenu(DeleteMid);
				IsSaveConfirmation = false;
			}
		}
		
	}

	private async Task DeleteMenu(int MId)
	{
		using var Db = DbFactory.CreateDbContext();
		var existmenu = await Db.Mst_Menu_New.Where(m => m.DeletedBy == null && m.MID == MId).FirstOrDefaultAsync();
		if (existmenu == null){ ToastService.ShowToast("No Menu found!", "warning", "Warning"); await LoadMenuList(); await GetMainMenuList(); return; }

		existmenu.DeletedBy = 1;
		existmenu.DeletedOn = DateTime.Now;
		await Db.SaveChangesAsync();
		ToastService.ShowToast("Menu Deleted successfully!", "success", "Success");
		await LoadMenuList(); 
		await GetMainMenuList();
	}

	private async Task GetMenuDetail(int Mid)
	{
		using var Db = DbFactory.CreateDbContext();
		var menudetail = await Db.Mst_Menu_New.Where(m => m.DeletedBy == null && m.MID == Mid).FirstOrDefaultAsync();
		if (menudetail == null) { ToastService.ShowToast("No Menu found!", "warning", "Warning"); await LoadMenuList(); await GetMainMenuList();  return; }
		IsSubmenu = menudetail.PMID != 0 ? true : false;
		menu = menudetail;
	}

	private async Task SaveMenu()
	{
		using var Db = DbFactory.CreateDbContext();
		if (menu.MID == 0)
		{
			Mst_Menu_New mst_Menu_New = new Mst_Menu_New
			{
				MenuName = menu.MenuName,
				MenuUrl = menu.MenuUrl,
				MenuDesc = menu.MenuDesc,
				MainMenu = menu.MenuName?.Replace(" ", "").ToLower(),
				SortOrder = menu.SortOrder,
				PMID = IsSubmenu ? menu.PMID : 0,
				CreatedBy = 1,
				CreatedOn = DateTime.Now
            };
			Db.Mst_Menu_New.Add(mst_Menu_New);
			await Db.SaveChangesAsync();
            StateHasChanged();
			ToastService.ShowToast("Menu Saved Successfully", "success", "Success");
			await LoadMenuList();
			await GetMainMenuList();
			Clear();
		}
		else
		{
			var existmenu = await Db.Mst_Menu_New.Where(m => m.DeletedBy == null && m.MID == menu.MID).FirstOrDefaultAsync();
			if (existmenu == null) { ToastService.ShowToast("No Menu found!", "warning", "Warning"); await LoadMenuList(); await GetMainMenuList(); return; }
			existmenu.MenuName = menu.MenuName;
			existmenu.MenuUrl = menu.MenuUrl;
			existmenu.MenuDesc = menu.MenuDesc;
			existmenu.MainMenu = menu.MenuName?.Replace(" ", "").ToLower();
			existmenu.SortOrder = menu.SortOrder;
			existmenu.PMID = IsSubmenu ? menu.PMID : 0;
			existmenu.UpdatedBy = 1;
			existmenu.UpdatedOn = DateTime.Now;
			await Db.SaveChangesAsync();
            StateHasChanged();
			ToastService.ShowToast("Menu Updated Successfully", "success", "Success");
            await LoadMenuList();
			await GetMainMenuList();
			Clear();
		}
	}
}
