@page "/department"
@layout MainLayout
@attribute [Authorize]
@* @inject EMSContext Db *@
@inject IDbContextFactory<EMSContext> DbFactory
@inject IJSRuntime JS
@inject ModalServices ModalService
@inject ToastService ToastService
@rendermode InteractiveServer

<PageTitle>Department</PageTitle>

<div class="row">
	<div class="col-md-6">
		<h3>Department</h3>
	</div>
    <div class="col-md-6" style="text-align:right">
        <button href="#" class="btn btn-success mb-3" @onclick="OpenAddModal">
            <i class="fa-solid fa-plus"></i> Add Department
        </button>
    </div>
</div>
@if (departmentlist == null)
{
	<p><em>Loading...</em></p>
}
<div class="row">
	<div class="col-12">
		<table class="table table-bordered border-black">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Department Name</th>
                    <th>Is Active</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var department in departmentlist)
                {
                    <tr>
                        <td>@department.Id</td>
                        <td>@department.DepartmentName</td>
                        <td>
                            <input type="checkbox" @bind="department.IsActive" disabled />
                        </td>
                        <td>
                            <a class="btn btn-sm btn-primary"><i class="fa-solid fa-pen"></i></a>
                            <a class="btn btn-sm btn-danger"><i class="fa-solid fa-trash"></i></a>
                        </td>
                    </tr>
                }
            </tbody>
		</table>
	</div>
</div>
<!-- Bootstrap Modal -->
<div class="modal fade" id="departmentModal" tabindex="-1" aria-labelledby="departmentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="newDepartment" OnValidSubmit="SaveDepartment">
                @* <DataAnnotationsValidator /> *@
                <FluentValidationValidator />

                <div class="modal-header">
                    <h5 class="modal-title" id="departmentModalLabel">Add Department</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <!-- Department Name -->
                    <InputText class="form-control mb-2"
                               placeholder="Department Name"
                               @bind-Value="newDepartment.DepartmentName" />
                    <ValidationMessage For="@(() => newDepartment.DepartmentName)" />

                    <!-- Is Active -->
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="newDepartment.IsActive" />
                        <label class="form-check-label">Is Active</label>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Save</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    private List<Mst_Department> departmentlist = new List<Mst_Department>();
    private Mst_Department newDepartment = new() { IsActive = false };
    private EditContext editContext;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        await LoadDepartment();

    }

    private async Task LoadDepartment()
    {
        using var Db = DbFactory.CreateDbContext();
        departmentlist = await Db.Mst_Department.Where(d => d.DeletedBy == null).ToListAsync();
    }

    #region commented code
    // private async Task SaveDepartment()
    // {
    //     Db.Mst_Department.Add(newDepartment);
    //     await Db.SaveChangesAsync();

    //     departmentlist = await Db.Mst_Department.ToListAsync(); // refresh list
    //     newDepartment = new Mst_Department(); // reset form

    //     // Close the modal
    //     await JS.InvokeVoidAsync("closeModal", "addDepartmentModal");
    // }
    #endregion

    private async Task OpenAddModal()
    {
        ResetForm();
        await ModalService.ShowAsync("departmentModal");
    }

    private void ResetForm()
    {
        newDepartment = new Mst_Department();
        editContext = new EditContext(newDepartment);
    }

    private async Task SaveDepartment()
    {
        using var Db = DbFactory.CreateDbContext();
        if (newDepartment.DepartmentName == "" || newDepartment.DepartmentName == null) { ToastService.ShowToast("Department saved successfully!", "success", "Success"); return; }
        var entity = new Mst_Department
        {
            DepartmentName = newDepartment.DepartmentName,
            IsActive = newDepartment.IsActive
        };

        Db.Mst_Department.Add(entity);
        await Db.SaveChangesAsync();

        await LoadDepartment();

        ToastService.ShowToast("Department saved successfully!", "success", "Success");

        await ModalService.HideAsync("departmentModal");

        // reset form + validation
        newDepartment = new();

    }

}
