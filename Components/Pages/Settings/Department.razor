@page "/department"
@layout MainLayout
@attribute [Authorize]
@* @inject EMSContext Db *@
@inject IDbContextFactory<EMSContext> DbFactory
@inject IJSRuntime JS
@inject ToastService ToastService
@rendermode InteractiveServer

<PageTitle>Department</PageTitle>
<section class="content">
    <div class="content-header">
        <div class="container-fluid p-0">
            <div class="row">
                <div class="col-5 col-lg-6">
                    <div class="main-title">
                        <h3>Department</h3>
                    </div>
                </div>
                <div class="col-6 col-lg-6">
                    <div class="float-right">
                        <button href="#" class="btn btn-success" @onclick="OpenAddModal">
                            <i class="fa-solid fa-plus"></i> Add Department
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="container-fluid p-0">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body table-responsive">
                        @if (departmentlist == null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        <div class="row">
                            <div class="col-12">
                                <table class="table table-bordered border-black">
                                    <thead>
                                        <tr>
                                            <th>Id</th>
                                            <th>Department Name</th>
                                            <th>Is Active</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var department in departmentlist)
                                        {
                                            <tr>
                                                <td>@department.Id</td>
                                                <td>@department.DepartmentName</td>
                                                <td>
                                                    <input type="checkbox" @bind="department.IsActive" disabled />
                                                </td>
                                                <td>
                                                    <a class="btn btn-sm btn-primary" @onclick="() => EditDepartment(department.Id)"><i class="fa-solid fa-pen"></i></a>
                                                    <a class="btn btn-sm btn-danger" @onclick="() => AskDelete(department.Id)"><i class="fa-solid fa-trash"></i></a>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Bootstrap Modal -->
    <div class="modal fade" id="departmentModal" tabindex="-1" aria-labelledby="departmentModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="newDepartment" OnValidSubmit="SaveDepartment">
                    <FluentValidationValidator />
                    @if (!string.IsNullOrEmpty(ModalMessage))
                    {
                        <div class="alert @ModalCssClass" role="alert">
                            @ModalMessage
                        </div>
                    }
                    <div class="modal-header">
                        <h5 class="modal-title" id="departmentModalLabel">Add Department</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div class="modal-body">
                        <!-- Department Name -->
                        <div class="form-group">
                            <label>Department Name</label>
                            <InputText class="form-control mb-2"
                                       placeholder="Department Name"
                                       @bind-Value="newDepartment.DepartmentName" />
                            <ValidationMessage For="@(() => newDepartment.DepartmentName)" />
                        </div>

                        <!-- Is Active -->
                        <div class="form-group">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="newDepartment.IsActive" id="IsActive" />
                                <label class="form-check-label" for="IsActive">Is Active</label>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-success">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</section>
<ConfirmationModal Show="@ShowConfirmDialog"
               Title="Delete Department"
               Message="Are you sure you want to delete this department?"
               ConfirmationChanged="OnDeleteConfirmation" />


@code {
    private List<Mst_Department> departmentlist = new List<Mst_Department>();
    private Mst_Department newDepartment = new() { IsActive = false };
    private EditContext? editContext;
    private string? ModalMessage { get; set; }
    private string ModalCssClass { get; set; } = "alert-info";
    private bool ShowConfirmDialog { get; set; }
    private int DeleteDeptId { get; set; }

    private async Task ShowModalMessage(string message, string type)
    {
        ModalMessage = message;
        ModalCssClass = type switch
        {
            "success" => "alert alert-success",
            "warning" => "alert alert-warning",
            "error" => "alert alert-danger",
            _ => "alert alert-info"
        };

        StateHasChanged();

        // wait 2 seconds
        await Task.Delay(3000);

        if (type == "success")
        {
            // Close modal
            //await ModalService.HideAsync("departmentModal");
            await JS.InvokeVoidAsync("bootstrapModalHelper.hide", "departmentModal");
            ResetForm();
        }

        // clear message after fade out
        ModalMessage = string.Empty;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        await LoadDepartment();

    }

    private async Task LoadDepartment()
    {
        using var Db = DbFactory.CreateDbContext();
        departmentlist = await Db.Mst_Department.Where(d => d.DeletedBy == null).ToListAsync();
    }

    private void AskDelete(int id)
    {
        DeleteDeptId = id;
        ShowConfirmDialog = true;
    }

    private async Task OnDeleteConfirmation(bool confirmed)
    {
        ShowConfirmDialog = false;
        if (confirmed)
        {
            await DeleteDepartment(DeleteDeptId);
        }
    }

    private async Task OpenAddModal()
    {
        ResetForm();
        //await ModalService.ShowAsync("departmentModal");
        await JS.InvokeVoidAsync("bootstrapModalHelper.show", "departmentModal");
    }

    private void ResetForm()
    {
        newDepartment = new Mst_Department();
        editContext = new EditContext(newDepartment);
    }

    private async Task EditDepartment(int Id)
    {
        using var Db = DbFactory.CreateDbContext();
        var department = Db.Mst_Department.Where(d => d.DeletedBy == null && d.Id == Id).FirstOrDefault();
        if (department == null || department.Id == 0)
        {
            ToastService.ShowToast("No Department found!", "warning", "Warning");
            await LoadDepartment();
        }
        else
        {
            newDepartment = department;
            //await ModalService.ShowAsync("departmentModal");
            await JS.InvokeVoidAsync("bootstrapModalHelper.show", "departmentModal");
        }
    }

    private async Task SaveDepartment()
    {
        using var Db = DbFactory.CreateDbContext();
        var checkdept = Db.Mst_Department.Where(d => d.DeletedBy == null && d.DepartmentName == newDepartment.DepartmentName && d.Id != newDepartment.Id).FirstOrDefault();
        if (newDepartment.Id == 0)
        {
            if (checkdept != null)
            {
                await ShowModalMessage("Department already exists!", "error");
                return;
            }

            var entity = new Mst_Department
            {
                DepartmentName = newDepartment.DepartmentName,
                IsActive = newDepartment.IsActive,
                CreatedBy = 1,
                CreatedOn = DateTime.Now
            };

            Db.Mst_Department.Add(entity);
            await Db.SaveChangesAsync();
            await LoadDepartment();
            await ShowModalMessage("Department saved successfully!", "success");
        }
        else
        {
            if (checkdept != null)
            {
                await ShowModalMessage("Department already exists!", "warning");
                return;
            }
            var existDept = Db.Mst_Department.Where(d => d.DeletedBy == null && d.Id == newDepartment.Id).FirstOrDefault();
            existDept.DepartmentName = newDepartment.DepartmentName;
            existDept.IsActive = newDepartment.IsActive;
            existDept.UpdatedBy = 1;
            existDept.UpdatedOn = DateTime.Now;
            await ShowModalMessage("Department updated successfully!", "success");
        }

    }

    private async Task DeleteDepartment(int Id)
    {
        using var Db = DbFactory.CreateDbContext();
        var department = await Db.Mst_Department.Where(d => d.DeletedBy == null && d.Id == Id).FirstOrDefaultAsync();
        if (department == null) { ToastService.ShowToast("No Department found!", "warning", "Warning"); await LoadDepartment(); return; }

        department.DeletedBy = 1;
        department.DeletedOn = DateTime.Now;
        await Db.SaveChangesAsync();
        ToastService.ShowToast("Department Deleted successfully!", "success", "Success");
        await LoadDepartment();
    }

}
