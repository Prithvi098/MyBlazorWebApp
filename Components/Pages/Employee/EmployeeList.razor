@page "/employeelist"
@attribute [Authorize]
@layout MainLayout
@inject IDbContextFactory<EMSContext> DbFactory
@inject ToastService ToastService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Employee List</PageTitle>
<div class="row mb-3">
    <h3 class="float-left">Employee List</h3>
</div>
<div class="row">
    <div class="col-md-6">
        <a class="btn btn-outline-primary mb-3" @onclick="() => GetInActiveEmployeeList()">
            @(IsActive ? "InActive Employee List" : "Active Employee List")
        </a>
    </div>
    <div class="col-md-6" style="text-align:right">
        <a href="/employeecreate" class="btn btn-success mb-3">
            <i class="fa-solid fa-plus"></i> Add Employee
        </a>
    </div>
</div>


@if (employeelist == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered border-3 border-black">
        <thead>
            <tr>
                <th>EmpId</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Username</th>
                <th>Email</th>
                <th>Department</th>
                <th>Is Active</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employeelist)
            {
                <tr>
                    <td>@employee.Empid</td>
                    <td>@employee.EmpFirstName</td>
                    <td>@employee.EmpLastName</td>
                    <td>@employee.Username</td>
                    <td>@employee.Email</td>
                    <td>@employee.DepartmentName</td>
                    <td>
                        <input type="checkbox" @bind="employee.IsActive" disabled />
                    </td>
                    <td>
                        <a class="btn btn-sm btn-primary" @onclick="() => EditEmployee(employee.Empid)"><i class="fa-solid fa-pen"></i></a>
                        <a class="btn btn-sm btn-danger" @onclick="() => AskDelete(employee.Empid)"><i class="fa-solid fa-trash"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<ConfirmationModal Show="@ShowConfirmDialog"
                   Title="Delete Employee"
                   Message="Are you sure you want to delete this employee?"
                   ConfirmationChanged="OnDeleteConfirmation" />

@code {
    private List<EmployeeListModel> employeelist = new List<EmployeeListModel>();
    private bool IsActive { get; set; } = true;
    private bool ShowConfirmDialog { get; set; }
    private int DeleteEmpId { get; set; }

    private async Task LoadEmployees()
    {
        using var db = DbFactory.CreateDbContext();
        employeelist = await (
                       from e in db.Mst_Employees
                       join d in db.Mst_Department.Where(x => x.DeletedBy == null) on e.Department_type equals d.Id into deptJoin
                       from d in deptJoin.DefaultIfEmpty() // LEFT JOIN
                       where e.DeletedBy == null && e.IsActive == IsActive 
                       select new EmployeeListModel
                       {
                           Empid = e.Emp_id,
                           EmpFirstName = e.Emp_firstname,
                           EmpLastName = e.Emp_surname,
                           Username = e.Username,
                           Email = e.Email_address,
                           DepartmentName = d != null ? d.DepartmentName : string.Empty, // blank if no department
                           IsActive = e.IsActive ?? false
                       }).ToListAsync();
    }

    private void AskDelete(int id)
    {
        DeleteEmpId = id;
        ShowConfirmDialog = true;
    }

    private async Task OnDeleteConfirmation(bool confirmed)
    {
        ShowConfirmDialog = false;
        if (confirmed)
        {
            await DeleteEmployee(DeleteEmpId);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        await LoadEmployees();
    }

    private async Task GetInActiveEmployeeList()
    {
        IsActive = !IsActive;
        await LoadEmployees();
    }

    private async Task EditEmployee(int EmpId)
    {
        Navigation.NavigateTo($"/employeeedit/{EmpId}");
    }

    async Task DeleteEmployee(int Id)
    {
        using var db = DbFactory.CreateDbContext();
        var emp = await db.Mst_Employees.Where(e => e.Emp_id == Id).FirstOrDefaultAsync();

        if(emp == null)
            ToastService.ShowToast("No Data Found.", "error", "Error");

        emp.DeletedBy = 1;
        emp.DeletedOn = DateTime.Now;
        await db.SaveChangesAsync();
        ToastService.ShowToast("Employee Deleted Successfully.", "success", "Success");

        await LoadEmployees();
        StateHasChanged();

    }

    private class EmployeeListModel
    {
        public int Empid { get; set; }
        public string? EmpFirstName { get; set; }
        public string? EmpLastName { get; set; }
        public string? Username { get; set; }
        public string? Email { get; set; }
        public string? DepartmentName { get; set; }
        public bool IsActive { get; set; }
    }
}
